name: AiraaCheisyaa CRD (VirtualBox & Performance Boost + Debian ISO)

on:
  workflow_dispatch:
    inputs:
      crd_full_command:
        description: 'Salin dan tempel SELURUH perintah dari halaman CRD Headless (CMD atau PowerShell)'
        required: true

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 4320
    env:
      CRD_USER_PASSWORD: ${{ secrets.CRD_USER_PASSWORD }}
      INSTALLER_CACHE_PATH: C:\cached-installers
      DEBIAN_ISO_FILENAME: debian-13.1.0-amd64-DVD-1.iso

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore Cached Installers and ISO
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: ${{ env.INSTALLER_CACHE_PATH }}
          key: ${{ runner.os }}-installers-v2-${{ env.DEBIAN_ISO_FILENAME }}

      - name: Create User AiraaCheisyaa
        shell: pwsh
        run: |
          $password = if ($env:CRD_USER_PASSWORD -and $env:CRD_USER_PASSWORD.Trim() -ne "") { $env:CRD_USER_PASSWORD } else { "ChangeThisPassword123!" }
          if (-not (Get-LocalUser -Name "AiraaCheisyaa" -ErrorAction SilentlyContinue)) {
            Write-Host "Membuat user lokal 'AiraaCheisyaa'..."
            $securePass = ConvertTo-SecureString $password -AsPlainText -Force
            New-LocalUser -Name "AiraaCheisyaa" -Password $securePass -FullName "AiraaCheisyaa" -Description "Account created by workflow"
            Add-LocalGroupMember -Group "Administrators" -Member "AiraaCheisyaa"
          } else {
            Write-Host "User sudah ada, melewati pembuatan."
          }
          echo "WINDOWS_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Prepare directories
        shell: pwsh
        run: |
          New-Item -Path C:\AiraaCheisyaa -ItemType Directory -Force | Out-Null
          New-Item -Path C:\AiraaCheisyaa\ISO -ItemType Directory -Force | Out-Null
          New-Item -Path C:\AiraaCheisyaa\logs -ItemType Directory -Force | Out-Null
          if (-not (Test-Path "${{ env.INSTALLER_CACHE_PATH }}")) {
            New-Item -Path "${{ env.INSTALLER_CACHE_PATH }}" -ItemType Directory -Force | Out-Null
          }

      - name: Set custom Windows wallpaper
        shell: pwsh
        run: |
          $wallpaperUrl = "https://files.catbox.moe/dqwzph.png"
          $wallpaperPath = "C:\AiraaCheisyaa\wallpaper.png"
          Invoke-WebRequest -Uri $wallpaperUrl -OutFile $wallpaperPath -UseBasicParsing
          $wallpaperScriptContent = @'
          Add-Type @"
          using System.Runtime.InteropServices;
          public class Wallpaper {
            [DllImport("user32.dll", SetLastError = true)]
            public static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
          }
          "@
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop\" -Name Wallpaper -Value "C:\AiraaCheisyaa\wallpaper.png"
          [Wallpaper]::SystemParametersInfo(20, 0, "C:\AiraaCheisyaa\wallpaper.png", 3)
          '@
          $userDocs = "C:\Users\AiraaCheisyaa\Documents"
          if (!(Test-Path $userDocs)) { New-Item -Path $userDocs -ItemType Directory | Out-Null }
          $wallpaperScriptPath = "$userDocs\SetWallpaper.ps1"
          $wallpaperScriptContent | Out-File -FilePath $wallpaperScriptPath -Encoding utf8 -Force
          $userProfilePath = "C:\Users\AiraaCheisyaa\Documents\WindowsPowerShell"
          if (!(Test-Path $userProfilePath)) { New-Item -Path $userProfilePath -ItemType Directory | Out-Null }
          $profileFile = "$userProfilePath\profile.ps1"
          $profileLine = "powershell -ExecutionPolicy Bypass -NoProfile -File `"$wallpaperScriptPath`""
          if (-not (Test-Path $profileFile) -or !(Get-Content $profileFile | Select-String -Pattern [regex]::Escape($wallpaperScriptPath))) {
            Add-Content -Path $profileFile -Value $profileLine
          }

      - name: Download Debian ISO (uses cache)
        shell: pwsh
        run: |
          $isoUrl = "https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/${{ env.DEBIAN_ISO_FILENAME }}"
          $cachedIsoPath = Join-Path "${{ env.INSTALLER_CACHE_PATH }}" "${{ env.DEBIAN_ISO_FILENAME }}"
          $finalIsoPath = "C:\AiraaCheisyaa\ISO\${{ env.DEBIAN_ISO_FILENAME }}"
          if (Test-Path $cachedIsoPath) {
              Write-Host "ISO found in cache. Copying to destination..."
              Copy-Item -Path $cachedIsoPath -Destination $finalIsoPath -Force
          } else {
              Write-Host "ISO not found in cache. Starting download..."
              Invoke-WebRequest -Uri $isoUrl -OutFile $cachedIsoPath -UseBasicParsing
              Copy-Item -Path $cachedIsoPath -Destination $finalIsoPath -Force
          }
          Write-Host "Debian ISO is ready at $finalIsoPath"

      - name: Install Pre-requisite Software (uses cache)
        shell: pwsh
        run: |
          $vscodePath = Join-Path "${{ env.INSTALLER_CACHE_PATH }}" "vscode_installer.exe"
          $vboxPath = Join-Path "${{ env.INSTALLER_CACHE_PATH }}" "virtualbox_installer.exe"
          $crdPath = Join-Path "${{ env.INSTALLER_CACHE_PATH }}" "crd.msi"

          # Visual Studio Code
          if (-not (Test-Path $vscodePath)) {
            Write-Host "Downloading VSCode installer..."
            Invoke-WebRequest -Uri "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user" -OutFile $vscodePath
          } else { Write-Host "VSCode installer found in cache." }
          Start-Process -FilePath $vscodePath -ArgumentList '/verysilent /mergetasks=!runcode' -Wait

          # VirtualBox
          if (-not (Test-Path $vboxPath)) {
            Write-Host "Downloading VirtualBox installer..."
            Invoke-WebRequest -Uri "https://download.virtualbox.org/virtualbox/7.0.18/VirtualBox-7.0.18-162988-Win.exe" -OutFile $vboxPath
          } else { Write-Host "VirtualBox installer found in cache." }
          Start-Process -FilePath $vboxPath -ArgumentList '--silent --ignore-reboot' -Wait

          # Chrome Remote Desktop
          if (-not (Test-Path $crdPath)) {
            Write-Host "Downloading CRD installer..."
            Invoke-WebRequest -Uri "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi" -OutFile $crdPath
          } else { Write-Host "CRD installer found in cache." }
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$crdPath`" /qn /norestart" -Wait

      - name: 'ðŸš€ Apply Performance Tweaks & Optimizations'
        shell: pwsh
        run: |
          Write-Host "Applying system optimizations for a smoother RDP experience..."
          try { powercfg /s SCHEME_MIN } catch { Write-Warning "powercfg tweak failed: $_" }
          try { Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name 'VisualFxSetting' -Value 2 -ErrorAction SilentlyContinue } catch {}
          Get-Service -Name wuauserv -ErrorAction SilentlyContinue | ForEach-Object { Stop-Service -InputObject $_ -Force -ErrorAction SilentlyContinue; Set-Service -Name $_.Name -StartupType Disabled }
          Get-Service -Name WSearch -ErrorAction SilentlyContinue | ForEach-Object { Stop-Service -InputObject $_ -Force -ErrorAction SilentlyContinue; Set-Service -Name $_.Name -StartupType Disabled }
          Write-Host "System optimizations applied successfully!"

      - name: Start CRD as AiraaCheisyaa, Boost Priority
        shell: pwsh
        run: |
          $password = if ($env:CRD_USER_PASSWORD -and $env:CRD_USER_PASSWORD.Trim() -ne "") { $env:CRD_USER_PASSWORD } else { "ChangeThisPassword123!" }
          $FullCommand = '${{ github.event.inputs.crd_full_command }}'
          $Pattern = '--code="(.+?)"'
          if ($FullCommand -match $Pattern) {
            $AuthCode = $matches[1]
            Write-Host "Auth code extracted successfully."
          } else {
            Write-Error "Auth code not found in the input. Please paste the full CRD headless command."
            exit 1
          }

          $PIN = "123456"
          $HostName = "gh-runner-${{ github.run_id }}"
          $crdExe = "C:\Program Files (x86)\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          $crdArgs = "--code=`"$AuthCode`" --redirect-url=`"https://remotedesktop.google.com/_/oauthredirect`" --name=`"$HostName`" -pin=`"$PIN`""
          $fullCommandToRun = "& `"$crdExe`" $crdArgs"

          Write-Host "Scheduling a one-time task to start CRD as AiraaCheisyaa..."

          schtasks /Create /SC ONCE /TN "StartCRDHost" /TR "powershell -Command $fullCommandToRun" /RU "AiraaCheisyaa" /RP "$password" /ST 23:59 /F
          schtasks /Run /TN "StartCRDHost"
          Start-Sleep -Seconds 15
          schtasks /Delete /TN "StartCRDHost" /F

          Write-Host "CRD host process started via scheduled task."

          try {
            Get-Process | Where-Object { $_.ProcessName -match 'remoting|remoting_host|chrome-remote-desktop' } | ForEach-Object {
              Write-Host "Boosting priority for process: $($_.ProcessName) (ID: $($_.Id))"
              try { $_.PriorityClass = 'High' } catch { Write-Warning "Failed to boost priority for PID $($_.Id): $_" }
            }
          } catch { Write-Warning "Could not boost process priority: $_" }
          
          Write-Host "----------------------------------------"
          Write-Host "Windows User: AiraaCheisyaa"
          Write-Host "CRD PIN: $PIN"
          Write-Host "Debian ISO Path: C:\AiraaCheisyaa\ISO\${{ env.DEBIAN_ISO_FILENAME }}"
          Write-Host "----------------------------------------"

      - name: Keep-Runner-Alive
        shell: pwsh
        run: |
          Write-Host "Workflow will now stay running up to the job timeout."
          Start-Sleep -Seconds 258000

      - name: ðŸ§¹ Run Full System Cleanup
        if: always()
        shell: pwsh
        run: |
          Write-Host "--- Starting Full System Cleanup ---"

          # 1. Stop CRD and related processes
          Write-Host "Stopping CRD processes..."
          Stop-Process -Name "remoting_*" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "chrome-remote-desktop" -Force -ErrorAction SilentlyContinue
          
          # 2. Remove user account
          Write-Host "Removing user 'AiraaCheisyaa'..."
          Remove-LocalUser -Name "AiraaCheisyaa" -ErrorAction SilentlyContinue

          # 3. Delete created files and directories
          Write-Host "Deleting C:\AiraaCheisyaa directory..."
          Remove-Item -Path C:\AiraaCheisyaa -Recurse -Force -ErrorAction SilentlyContinue

          # 4. Uninstall CRD Host silently
          Write-Host "Uninstalling Chrome Remote Desktop Host..."
          $crdMsiPath = Join-Path "${{ env.INSTALLER_CACHE_PATH }}" "crd.msi"
          if (Test-Path $crdMsiPath) {
            Start-Process msiexec.exe -ArgumentList "/x `"$crdMsiPath`" /qn" -Wait
          }
          Remove-Item -Path "C:\ProgramData\Google\Chrome Remote Desktop" -Recurse -Force -ErrorAction SilentlyContinue

          # 5. Reset system tweaks
          Write-Host "Reverting system tweaks..."
          # Set power scheme back to Balanced (default GUID)
          powercfg /s 381b4222-f694-41f0-9685-ff5bb260df2e | Out-Null
          # Re-enable Windows Update and Search services
          Set-Service -Name wuauserv -StartupType Automatic -ErrorAction SilentlyContinue
          Set-Service -Name WSearch -StartupType Automatic -ErrorAction SilentlyContinue
          Start-Service wuauserv -ErrorAction SilentlyContinue
          Start-Service WSearch -ErrorAction SilentlyContinue

          Write-Host "--- Cleanup Finished ---"
