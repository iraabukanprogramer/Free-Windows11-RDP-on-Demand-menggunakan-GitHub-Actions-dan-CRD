name: AiraaCheisyaa CRD (VirtualBox & Performance Boost + Debian ISO)

on:
  workflow_dispatch:
    inputs:
      crd_full_command:
        description: 'Salin dan tempel SELURUH perintah dari halaman CRD Headless (CMD atau PowerShell)'
        required: true

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 4320
    env:
      CRD_USER_PASSWORD: ${{ secrets.CRD_USER_PASSWORD }}

    steps:
      - name: Create User AiraaCheisyaa
        shell: pwsh
        run: |
          $password = if ($env:CRD_USER_PASSWORD -and $env:CRD_USER_PASSWORD.Trim() -ne "") { $env:CRD_USER_PASSWORD } else { "ChangeThisPassword123!" }
          if (-not (Get-LocalUser -Name "AiraaCheisyaa" -ErrorAction SilentlyContinue)) {
            Write-Host "Membuat user lokal 'AiraaCheisyaa'..."
            $securePass = ConvertTo-SecureString $password -AsPlainText -Force
            New-LocalUser -Name "AiraaCheisyaa" -Password $securePass -FullName "AiraaCheisyaa" -Description "Account created by workflow"
            Add-LocalGroupMember -Group "Administrators" -Member "AiraaCheisyaa"
          } else {
            Write-Host "User sudah ada, melewati pembuatan."
          }
          echo "WINDOWS_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Prepare directories
        shell: pwsh
        run: |
          New-Item -Path C:\AiraaCheisyaa -ItemType Directory -Force | Out-Null
          New-Item -Path C:\AiraaCheisyaa\ISO -ItemType Directory -Force | Out-Null
          New-Item -Path C:\AiraaCheisyaa\logs -ItemType Directory -Force | Out-Null

      - name: Set custom Windows wallpaper (auto apply for AiraaCheisyaa)
        shell: pwsh
        run: |
          $wallpaperUrl = "https://files.catbox.moe/dqwzph.png"
          $wallpaperPath = "C:\AiraaCheisyaa\wallpaper.png"
          Invoke-WebRequest -Uri $wallpaperUrl -OutFile $wallpaperPath -UseBasicParsing

          $wallpaperScriptContent = @'
Add-Type @"
using System.Runtime.InteropServices;
public class Wallpaper {
  [DllImport("user32.dll", SetLastError = true)]
  public static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
}
"@
Set-ItemProperty -Path "HKCU:\Control Panel\Desktop\" -Name Wallpaper -Value "C:\AiraaCheisyaa\wallpaper.png"
[Wallpaper]::SystemParametersInfo(20, 0, "C:\AiraaCheisyaa\wallpaper.png", 3)
'@
          $userDocs = "C:\Users\AiraaCheisyaa\Documents"
          if (!(Test-Path $userDocs)) { New-Item -Path $userDocs -ItemType Directory | Out-Null }
          $wallpaperScriptPath = "$userDocs\SetWallpaper.ps1"
          $wallpaperScriptContent | Out-File -FilePath $wallpaperScriptPath -Encoding utf8 -Force

          $userProfilePath = "C:\Users\AiraaCheisyaa\Documents\WindowsPowerShell"
          if (!(Test-Path $userProfilePath)) { New-Item -Path $userProfilePath -ItemType Directory | Out-Null }
          $profileFile = "$userProfilePath\profile.ps1"
          $profileLine = "powershell -ExecutionPolicy Bypass -NoProfile -File `"$wallpaperScriptPath`""
          if (-not (Test-Path $profileFile) -or !(Get-Content $profileFile | Select-String -Pattern [regex]::Escape($wallpaperScriptPath))) {
            Add-Content -Path $profileFile -Value $profileLine
          }

      - name: Download Debian ISO (resumable, retries)
        shell: pwsh
        run: |
          $url = "https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/debian-13.1.0-amd64-DVD-1.iso"
          $out = "C:\AiraaCheisyaa\ISO\debian-13.1.0-amd64-DVD-1.iso"
          $maxAttempts = 5
          $attempt = 0
          $success = $false

          Function Write-Log($m) { "$((Get-Date).ToString('u')) - $m" | Out-File -FilePath C:\AiraaCheisyaa\logs\download.log -Append -Encoding utf8 }

          while (-not $success -and $attempt -lt $maxAttempts) {
            $attempt++
            Write-Log "Attempt #$attempt to download ISO"
            try {
              if (Get-Command -Name Start-BitsTransfer -ErrorAction SilentlyContinue) {
                Write-Log "Using Start-BitsTransfer"
                if (Test-Path $out) {
                  Write-Log "File already exists at $out; skipping download."
                  $success = $true
                  break
                }
                Start-BitsTransfer -Source $url -Destination $out -Description "Downloading Debian ISO for AiraaCheisyaa" -DisplayName "Debian ISO Download" -Priority Foreground -ErrorAction Stop
                $success = $true
              } else {
                Write-Log "Start-BitsTransfer not available, falling back to Invoke-WebRequest (non-resumable)."
                Invoke-WebRequest -Uri $url -OutFile $out -UseBasicParsing -TimeoutSec 3600 -ErrorAction Stop
                $success = $true
              }
            } catch {
              Write-Log "Download attempt #$attempt failed: $($_.Exception.Message)"
              Start-Sleep -Seconds (30 * $attempt)
            }
          }

          if (-not $success) {
            Write-Log "Gagal mengunduh setelah $maxAttempts percobaan. Exit with non-zero status."
            throw "Failed to download Debian ISO after $maxAttempts attempts."
          } else {
            Write-Log "Download berhasil: $out"
          }

      - name: Install Pre-requisite Software (VSCode, VirtualBox, Chrome Remote Desktop)
        shell: pwsh
        run: |
          Write-Host "Mengunduh dan menginstal Visual Studio Code..."
          $vscode = "$env:TEMP\vscode_installer.exe"
          Invoke-WebRequest -Uri "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user" -OutFile $vscode -UseBasicParsing
          Start-Process -FilePath $vscode -ArgumentList '/verysilent /mergetasks=!runcode' -Wait

          Write-Host "Mengunduh dan menginstal Oracle VirtualBox..."
          $vbox = "$env:TEMP\virtualbox_installer.exe"
          Invoke-WebRequest -Uri "https://download.virtualbox.org/virtualbox/7.0.18/VirtualBox-7.0.18-162988-Win.exe" -OutFile $vbox -UseBasicParsing
          Start-Process -FilePath $vbox -ArgumentList '--silent --ignore-reboot' -Wait

          Write-Host "Mengunduh dan menginstal Chrome Remote Desktop..."
          $crd = "$env:TEMP\crd.msi"
          Invoke-WebRequest -Uri "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi" -OutFile $crd -UseBasicParsing
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$crd`" /qn /norestart" -Wait

      - name: ðŸš€ Apply Performance Tweaks & Optimizations
        shell: pwsh
        run: |
          Write-Host "Applying system optimizations for a smoother RDP experience..."
          try { powercfg /s SCHEME_MIN } catch { Write-Warning "powercfg tweak failed: $_" }
          try { Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name 'VisualFxSetting' -Value 2 -ErrorAction SilentlyContinue } catch {}
          Get-Service -Name wuauserv -ErrorAction SilentlyContinue | ForEach-Object { Stop-Service -InputObject $_ -Force -ErrorAction SilentlyContinue; Set-Service -Name $_.Name -StartupType Disabled }
          Get-Service -Name WSearch -ErrorAction SilentlyContinue | ForEach-Object { Stop-Service -InputObject $_ -Force -ErrorAction SilentlyContinue; Set-Service -Name $_.Name -StartupType Disabled }
          Write-Host "System optimizations applied successfully!"

      - name: Start CRD as AiraaCheisyaa, Boost Priority
        shell: pwsh
        run: |
          $password = if ($env:CRD_USER_PASSWORD -and $env:CRD_USER_PASSWORD.Trim() -ne "") { $env:CRD_USER_PASSWORD } else { "ChangeThisPassword123!" }

          $FullCommand = '${{ github.event.inputs.crd_full_command }}'
          $Pattern = '--code="(.+?)"'
          if ($FullCommand -match $Pattern) {
            $AuthCode = $matches[1]
            Write-Host "Auth code OK."
          } else {
            Write-Error "Auth code not found in input. Paste the full CRD headless command."
            exit 1
          }

          $PIN = "123456"
          $HostName = "gh-runner-${{ github.run_id }}"
          $crdExe = "C:\Program Files (x86)\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          $args = "--code=`"$AuthCode`" --redirect-url=`"https://remotedesktop.google.com/_/oauthredirect`" --name=`"$HostName`" -pin=`"$PIN`""

          $secPass = ConvertTo-SecureString $password -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential(".\AiraaCheisyaa",$secPass)

          if (Test-Path "$crdExe") {
            try {
              Start-Process -FilePath "$crdExe" -ArgumentList $args -Credential $cred -WindowStyle Hidden
              Start-Sleep -Seconds 10
              Write-Host "Started CRD under AiraaCheisyaa context."
            } catch {
              Write-Warning "Failed to Start-Process with credential: $($_.Exception.Message)"
              Write-Warning "Attempting Start-Process without credential (fallback)..."
              Start-Process -FilePath "$crdExe" -ArgumentList $args -WindowStyle Hidden
            }
          } else {
            Write-Warning "CRD executable not found at $crdExe"
          }

          try {
            Get-Process | Where-Object { $_.ProcessName -match 'remoting|remoting_host|chrome-remote-desktop' } | ForEach-Object { try { $_.PriorityClass = 'High' } catch {} }
          } catch {}

          Write-Host "Windows User: AiraaCheisyaa"
          Write-Host "CRD PIN: $PIN"
          Write-Host "Debian ISO Path: C:\AiraaCheisyaa\ISO\debian-13.1.0-amd64-DVD-1.iso"

      - name: Keep-Runner-Alive (job-level guard, up to 72h)
        shell: pwsh
        run: |
          Write-Host "Workflow will now stay running up to the job timeout (configured for 72 hours)."
          $end = (Get-Date).AddHours(72)
          while ((Get-Date) -lt $end) {
            Start-Sleep -Seconds 60
          }
          Write-Host "Guard sleep finished. If runner is ephemeral, scheduled task won't survive VM teardown."

      - name: How to disable persistent keep-alive (instructions)
        shell: pwsh
        run: |
          Write-Host "To manually stop the persistent keep-alive on the machine (when you control the machine), run as Administrator:"
          Write-Host "  schtasks /Delete /TN 'Keep-CRD-Alive' /F"
          Write-Host "  Remove-Item C:\AiraaCheisyaa\ -Recurse -Force"
          Write-Host "If this is a GitHub-hosted runner, note the VM is ephemeral and will be destroyed automatically after the job ends."
